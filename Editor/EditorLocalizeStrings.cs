// Generated by Assets/Hananoki/BuildAssist/Localize/ja-JP.csv
namespace Hananoki.BuildAssist {
	public static class L {
		public static string Tr( string s ) {
			return EditorLocalize.Tr( EditorLocalize.GetPakage( Package.name ), s );
		}
		public static string[] Tr( string[] ss ) {
			return EditorLocalize.Tr( EditorLocalize.GetPakage( Package.name ), ss );
		}
	}
	public static class S {
		public static string _ProductName => L.Tr( "Product Name" );
		public static string _Configuration => L.Tr( "Configuration" );
		public static string _Build => L.Tr( "Build" );
		public static string _SwitchPlatform => L.Tr( "Switch Platform" );
		public static string _Architecture => L.Tr( "Architecture" );
		public static string _SelectOutputDirectory => L.Tr( "Select Output Directory" );
		public static string _Compression => L.Tr( "Compression" );
		public static string _CompressionMethod => L.Tr( "Compression Method" );
		public static string __NotFoundDirectory__ => L.Tr( "[Not Found Directory] … " );
		public static string __ActiveBuildTarget_ => L.Tr( " [Active Build Target]" );
		public static string _PlayerSettings_Androidsettingsareincomplete => L.Tr( "PlayerSettings.Android settings are incomplete" );
		public static string _IfBundleVersionCodeis0_abuilderroroccurs => L.Tr( "If BundleVersionCode is 0, a build error occurs" );
		public static string _AnerroroccursifPackageNameis_com_Company_ProductName_ => L.Tr( "An error occurs if PackageName is \"com.Company.ProductName\"" );
		public static string _PackageNameisempty => L.Tr( "PackageName is empty" );
		public static string _PackageNamemustbeseparatedbyatleastone__Dot_ => L.Tr( "PackageName must be separated by at least one .(Dot)" );
		public static string _AnerroroccursifPackageNamestartswitha__Dot_ => L.Tr( "An error occurs if PackageName starts with a .(Dot)" );
		public static string _AnerroroccursiftheendofPackageNameis__Dot_ => L.Tr( "An error occurs if the end of PackageName is .(Dot)" );
		public static string _DevelopmentBuild => L.Tr( "Development Build" );
		public static string _ProfilingisonlyenabledinaDevelopmentPlayer => L.Tr( "Profiling is only enabled in a Development Player" );
		public static string _ConnectProfiler => L.Tr( "Connect Profiler" );
		public static string _AutoRunPlayer => L.Tr( "Auto Run Player" );
		public static string _BuildAndRun => L.Tr( "Build And Run" );
		public static string _BuildAssetBundletogether => L.Tr( "Build AssetBundle together" );
		public static string _BuildAppBundle_GooglePlay_ => L.Tr( "Build App Bundle (Google Play)" );
		public static string _ScriptingBackend => L.Tr( "ScriptingBackend" );
		public static string _C__CompilerConfiguration => L.Tr( "C++ Compiler Configuration" );
		public static string _ScriptingDefineSymbols => L.Tr( "Scripting Define Symbols" );
		public static string _Applybuildonly => L.Tr( "Apply build only" );
		public static string _Current => L.Tr( "Current" );
		public static string _NotethatWebGLdevelopmentbuildsaremuchlargerthanreleasebuildsandshoundnotbepublicsed => L.Tr( "Note that WebGL development builds are much larger than release builds and shound not be publicsed" );
		public static string _NoCompression => L.Tr( "No Compression" );
		public static string _StandardCompression_LZMA_ => L.Tr( "Standard Compression (LZMA)" );
		public static string _ChunkBasedCompression_LZ4_ => L.Tr( "Chunk Based Compression (LZ4)" );
		public static string _ExcludeTypeInformation => L.Tr( "Exclude Type Information" );
		public static string _ForceRebuild => L.Tr( "Force Rebuild" );
		public static string _IgnoreTypeTreeChanges => L.Tr( "Ignore Type Tree Changes" );
		public static string _AppendHash => L.Tr( "Append Hash" );
		public static string _StrictMode => L.Tr( "Strict Mode" );
		public static string _DryRunBuild => L.Tr( "Dry Run Build" );
		public static string _ClearFiles => L.Tr( "Clear Files" );
		public static string _CopyingthebuildresultstoStreamingAssets => L.Tr( "Copying the build results to StreamingAssets" );
		public static string _CreateabuildBATfile => L.Tr( "Create a build BAT file" );
		public static string _BuildBATcreated => L.Tr( "Build BAT created" );
		public static string _Autosetting => L.Tr( "Auto setting" );
		public static string _Chooseyourplatformfrompreferences_ => L.Tr( "Choose your platform from preferences." );
		public static string _Currentlynotsupported_ => L.Tr( "Currently not supported." );
		public static string _UseConfigurationName => L.Tr( "Use Configuration Name" );
		public static string _Selectplatformtouse => L.Tr( "Select platform to use" );
		public static string _CompressionFormat => L.Tr( "Compression Format" );
		public static string _WebGLresourcesarestoredusingBrotlicompression_ => L.Tr( "WebGL resources are stored using Brotli compression." );
		public static string _WebGLresourcesarestoredusingGzipcompression_ => L.Tr( "WebGL resources are stored using Gzip compression." );
		public static string _WebGLresourcesareuncompressed_ => L.Tr( "WebGL resources are uncompressed." );
		public static string _LinkerTarget => L.Tr( "LinkerTarget" );
		public static string _Onlyasm_jsoutputwillbegenerated_Thissettinghasbeendeprecated_ => L.Tr( "Only asm.js output will be generated. This setting has been deprecated." );
		public static string _OnlyWebAssemblyoutputwillbegenerated_ThiswillrequireabrowserwithWebAssemblysupporttorunthegeneratedcontent_ => L.Tr( "Only WebAssembly output will be generated. This will require a browser with WebAssembly support to run the generated content." );
		public static string _Bothasm_jsandWebAssemblyoutputwillbegenerated_TheWebAssemblyversionofthegeneratedcontentwillbeusedifsupportedbythebrowser_otherwise_theasm_jsversionwillbeused_Thissettinghasbeendeprecated_ => L.Tr( "Both asm.js and WebAssembly output will be generated. The WebAssembly version of the generated content will be used if supported by the browser, otherwise, the asm.js version will be used. This setting has been deprecated." );
		public static string _WebAssemblyStreaming => L.Tr( "WebAssembly Streaming" );
		public static string _EnableMultiThread => L.Tr( "Enable MultiThread" );
		public static string _MemorySize => L.Tr( "MemorySize" );
		public static string _EnableExceptions => L.Tr( "Enable Exceptions" );
		public static string _Disableexceptionsupport_ => L.Tr( "Disable exception support." );
		public static string _Enablethrowsupport_ => L.Tr( "Enable throw support." );
		public static string _Enableexceptionsupportforallexceptions_withoutstacktraceinformation_ => L.Tr( "Enable exception support for all exceptions, without stack trace information." );
		public static string _Enableexceptionsupportforallexceptions_includingstacktraceinformation_ => L.Tr( "Enable exception support for all exceptions, including stack trace information." );
		public static string _EnableMultithreadingsupport_ => L.Tr( "Enable Multithreading support." );
		public static string _Whenenabled_Unityoutputsabuildwithmultithreadingsupport_ThegeneratedcontentrequiresabrowserthatsupportsWebAssemblythreads_Thisisanexperimentalfeatureandshouldonlybeusedfortestingpurposes_ => L.Tr( "When enabled, Unity outputs a build with multithreading support. The generated content requires a browser that supports WebAssembly threads. This is an experimental feature and should only be used for testing purposes." );
		public static string _EnableWebAssemblystreamingcompilation_ => L.Tr( "Enable WebAssembly streaming compilation." );
		public static string _Whenenabled_UnitycompilestheWebAssemblybinaryfilewhilethefiledownloads_Thissettingrequiresan_application_wasm_mimetype_sosetuptheserveraccordingly_ => L.Tr( "When enabled, Unity compiles the WebAssembly binary file while the file downloads. This setting requires an 'application/wasm' mime type, so set up the server accordingly." );
		public static string _EnableAssetBundleBuild => L.Tr( "Enable AssetBundle Build" );
		public static string _Enablingassetexclusionatbuildtime => L.Tr( "Enabling asset exclusion at build time" );
		public static string _ExclusionAssetsList => L.Tr( "Exclusion Assets List" );
		public static string _BuildSceneSet => L.Tr( "Build Scene Set" );
		public static string _ExcludescenesfromthebuildthatarenotregisteredinBuildSettings => L.Tr( "Exclude scenes from the build that are not registered in BuildSettings" );
		public static string _BuildSettingsScenes => L.Tr( "Build Settings Scenes" );
		public static string _ScenesotherthanBuildSettings => L.Tr( "Scenes other than BuildSettings" );
		public static string _Checktheorderofthebuild => L.Tr( "Check the order of the build" );
		public static string _UsethestandardBuildSettings => L.Tr( "Use the standard Build Settings" );
		public static string _Usingtheold_styleProjectSettings => L.Tr( "Using the old-style ProjectSettings" );
		public static string _Registerasafolder => L.Tr( "Register as a folder" );
		public static string _Registeringfilescontainedinafolder => L.Tr( "Registering files contained in a folder" );
	}
}
